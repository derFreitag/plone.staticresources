/*! @plone/mockup 5.0.0-alpha.27 */
"use strict";(self.webpackChunkplone_staticresources=self.webpackChunkplone_staticresources||[]).push([[15244],{15244:function(e,t,n){n.r(t);var r=n(22236),a=n.n(r),s=n(7424),i=n(37834),c=n(11191),l=n(18742),o=n(72459);const u=s.Z.getLogger("pat.markdown"),d=/\.md$/,p=c.Z.extend({name:"markdown",trigger:".pat-markdown",async init(){if(this.$el.is(this.trigger)){const e=this.$el.is(":input")?this.$el.val():this.$el[0].innerHTML;let t=await this.render(e);this.el.replaceWith(...t)}},async render(e){const t=(await n.e(88419).then(n.t.bind(n,88419,23))).marked,r=(await n.e(3824).then(n.t.bind(n,3824,23))).default,s=(await n.e(18378).then(n.bind(n,18378))).default,i=document.createElement("div"),c=r.sanitize(t.parse(e));i.innerHTML=c;for(const e of i.querySelectorAll("pre > code")){const t=e.parentElement;t.classList.add("pat-syntax-highlight"),new s(t),await l.Z.await_event(t,"init.syntax-highlight.patterns")}return a()(i)},async renderForInjection(e,t){let n,r=t;if(e.source&&null!==(n=/^#+\s*(.*)/.exec(e.source))){if(r=this.extractSection(r,n[1]),null===r)return u.warn('Could not find section "'+e.source+'" in '+e.url),a()("<div/>").attr("data-src",e.url);r+="\n"}return(await this.render(r)).attr("data-src",e.source?e.url+e.source:e.url)},extractSection(e,t){let n;t=i.Z.escapeRegExp(t);let r=new RegExp("^((#+)\\s*@TEXT@\\s*|@TEXT@\\s*\\n([=-])+\\s*)$".replace(/@TEXT@/g,t),"m"),a=r.exec(e);if(null===a)return null;if(a[2]){const e=a[2].length;n="^#{@LEVEL@}\\s*@TEXT@\\s*$\\n+((?:.|\\n)*?(?=^#{1,@LEVEL@}\\s)|.*(?:.|\\n)*)",n=n.replace(/@LEVEL@/g,e)}else{if(!a[3])return u.error("Unexpected section match result",a),null;n="="===a[3]?"^@TEXT@\\s*\\n=+\\s*\\n+((?:.|\\n)*?(?=^.*?\\n=+\\s*$)|(?:.|\\n)*)":"^@TEXT@\\s*\\n-+\\s*\\n+((?:.|\\n)*?(?=^.*?\\n[-=]+\\s*$)|(?:.|\\n)*)"}return n=n.replace(/@TEXT@/g,t),r=new RegExp(n,"m"),a=r.exec(e),null===a&&u.error("Failed to find section with known present header?"),null!==a?a[0]:null}});a()(document).ready((function(){a()(document.body).on("patterns-inject-triggered.pat-markdown","a.pat-inject",(function(){a()(this).data("pat-inject").forEach((function(e){d.test(e.url)&&(e.dataType="markdown")}))}))})),o.Z.registerTypeHandler("markdown",{async sources(e,t){return await Promise.all(e.map((async function(e){const n=new p(e.$target[0]);return await n.renderForInjection(e,t)})))}}),t.default=p}}]);
//# sourceMappingURL=15244.894541c924157fa63b91.min.js.map